<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>XWiki</web>
  <name>AutoReloadExtension</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1420066800000</creationDate>
  <date>1420066800000</date>
  <contentUpdateDate>1420066800000</contentUpdateDate>
  <version>1.1</version>
  <title>Auto Reload Extension</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.AutoReloadExtension</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0b3e9f3e-b0d3-4337-83dc-8460035b429e</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>version = "";
autoreloadstatus = false;

require(['jquery', 'xwiki-events-bridge'], function($) {
  function createCookie(name, value, path, days) {
    var expires;

    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = "; expires=" + date.toGMTString();
    } else {
        expires = "";
    }
    document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value) + expires + "; path=" + path;
}

  function readCookie(name) {
    var nameEQ = encodeURIComponent(name) + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i &lt; ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
}

function eraseCookie(name, path) {
    createCookie(name, "", path, -1);
}

  
  function testCurrentPageVersion() {
      setTimeout(function() {
        $.getJSON(XWiki.currentDocument.getRestURL(), function( data ) {
           if (data.version &amp;&amp; data.version!=version) {
              // page has been updated
              console.log("Version differs.. Auto-reloading");
              history.go(0);
           } else {
              if (autoreloadstatus==true)
                testCurrentPageVersion();
           }
        });    
      }, 10000);
  }
  
  $(document).ready(function(event, data) {
   if (XWiki.contextaction=="view") {
   $.getJSON(XWiki.currentDocument.getRestURL(), function( data ) {
      version = data.version;
      console.log("Initial version " + data.version);
     
      var dividerLIList = $("#tmMoreActions ul li.divider");
      if (dividerLIList!=null &amp;&amp; dividerLIList.length&gt;0) {
        var dividerLI = dividerLIList.last();       
        var autoStartCookieValue = readCookie("autoreload-" + XWiki.currentSpace + "." + XWiki.currentPage);
        if (autoStartCookieValue==1) {
         console.log("Starting auto-reload from cookie");
         dividerLI.before("&lt;li&gt;&lt;a href='javascript:void(0)' id='autoreload-startlink'&gt;" + "${services.localization.render('autoreload.stop')}" + "&lt;/a&gt;&lt;/li&gt;");
         autoreloadstatus = true;
         testCurrentPageVersion();
        }Â else {
         dividerLI.before("&lt;li&gt;&lt;a href='javascript:void(0)' id='autoreload-startlink'&gt;" + "${services.localization.render('autoreload.start')}" + "&lt;/a&gt;&lt;/li&gt;");
        }
          
        $("#autoreload-startlink").click(function(event) {
           if (autoreloadstatus==false) {
            autoreloadstatus = true;
            console.log("Starting auto-reload");
            $("#autoreload-startlink").text("${services.localization.render('autoreload.stop')}");
            createCookie("autoreload-" + XWiki.currentSpace + "." + XWiki.currentPage, "1", location.path, 1);
            testCurrentPageVersion();
           } else {
            autoreloadstatus = false;
            console.log("Stopping auto-reload");
            $("#autoreload-startlink").text("${services.localization.render('autoreload.start')}");
            eraseCookie("autoreload-" + XWiki.currentSpace + "." + XWiki.currentPage, location.path);
           }
           return false;
        })
      }
     
    });
   }
  });
});

</code>
    </property>
    <property>
      <name>Auto Reload Extension</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
  <content>
This extensions auto-reloads documents in view mode that have changed. 
Auto-reload can be started from the "More actions" menu.

</content>
</xwikidoc>
